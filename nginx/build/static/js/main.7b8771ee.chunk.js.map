{"version":3,"sources":["logo.svg","components/app-bar.js","actions/index.js","components/task-detail.js","containers/task_list.js","containers/task-monitor.js","components/App.js","reducers/index.js","reducers/reducer_task.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MMRAppBar","props","classes","react_default","a","createElement","AppBar_default","position","Toolbar_default","Typography_default","variant","color","ROOT_URL","FETCH_TASKS","fetchTasks","url","concat","request","axios","get","type","payload","TaskDetail","Paper_default","style","padding","align","Grid_default","container","alignItems","item","xs","Tv_default","this","task","host","source_path","react_time_lib_default","value","time_added","format","task_detail_TaskDuration","task_detail_TaskProgress","Component","TaskProgress","state","CircularProgress_default","progress","TaskDuration","time_started","time_completed","TaskList","tasks","map","key","id","task_detail","Divider_default","renderTask","connect","_ref","TaskMonitor","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onClick","bind","assertThisInitialized","timer","setInterval","setState","clearInterval","task_list","dispatch","bindActionCreators","App","className","app_bar","spacing","task_monitor","rootReducer","combineReducers","arguments","length","undefined","action","data","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","createStoreWithMiddleware","applyMiddleware","ReduxPromise","createStore","ReactDOM","render","es","store","reducers","App_App","document","querySelector","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.7b8771ee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport ToolBar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport { withStyles } from 'material-ui/styles';\n\nconst styles = theme => ({\n    toolbar: {\n        height: 200,\n    },\n})\n\nfunction MMRAppBar(props) {\n    const { classes } = props;\n\n    return (\n        <div>\n            <AppBar position={\"static\"}>\n                <ToolBar>\n                    <Typography variant={'h6'} color={\"inherit\"}>\n                        Tasks\n                    </Typography>\n                </ToolBar>\n            </AppBar>\n            {/*<Grid container className={classes.demo}>*/}\n            {/*</Grid>*/}\n        </div>\n    );\n}\n\nexport default MMRAppBar;\n// export default withStyles(styles)(MMRAppBar)","import axios from 'axios';\n\nconst ROOT_URL= `http://ssessner.com/mmr-api/v1/tasks?filter=open&filter=active`;\n\nexport const FETCH_TASKS = 'FETCH_TASKS';\n\nexport function fetchTasks() {\n    const url = `${ROOT_URL}`;\n    const request = axios.get(url);\n\n    return {\n        type: FETCH_TASKS,\n        payload: request\n    };\n}","import React, { Component } from 'react';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Tv from '@material-ui/icons/Tv';\nimport Time from 'react-time';\n\n\nclass TaskDetail extends Component {\n\n    render() {\n        return (\n            <div>\n                <Paper style={{padding: 12}} align={\"left\"}>\n                    <Grid container alignItems={\"center\"}>\n                        <Grid item xs={1} align={\"center\"}>\n                            <Tv/>\n                        </Grid>\n                        <Grid item xs={9}>\n                            <Typography variant={\"h6\"}>{this.props.task.host}</Typography>\n                        </Grid>\n                        <Grid item xs={2} align={\"right\"}>\n                        </Grid>\n                    </Grid>\n                    <Grid container>\n                        <Grid item xs={1}/>\n                        <Grid item xs={9}>\n                            <Typography variant={\"body1\"}>{this.props.task.source_path}</Typography>\n                            <Typography variant={\"body1\"}>\n                                Added: <Time value={this.props.task.time_added} format={\"DD/MM/YYYY hh:mm A\"}/>\n                            </Typography>\n                            <TaskDuration task={this.props.task}/>\n                        </Grid>\n                        <Grid item xs={2} align={\"right\"}>\n                            <TaskProgress task={this.props.task} />\n                        </Grid>\n\n                    </Grid>\n                </Paper>\n            </div>\n        );\n    }\n}\n\nclass TaskProgress extends Component {\n    render() {\n        if (this.props.task.state == \"active\") {\n            return (\n                <CircularProgress variant={\"static\"} color={\"secondary\"} value={this.props.task.progress}/>\n            );\n        }\n        else {\n            return (\n                <Typography variant={\"body1\"}>{this.props.task.state}</Typography>\n            );\n        }\n    }\n}\n\nclass TaskDuration extends Component {\n    render() {\n        switch (this.props.task.state){\n            case \"open\": {\n                return \"\";\n            }\n            case \"active\": {\n                return(\n                    <Typography variant={\"body1\"}>\n                        Started: <Time value={this.props.task.time_started} format={\"DD/MM/YYYY hh:mm A\"}/>\n                    </Typography>\n                );\n            }\n            case \"complete\": {\n                return(\n                    <div>\n                        <Typography variant={\"body1\"}>\n                            Started: <Time value={this.props.task.time_started} format={\"DD/MM/YYYY hh:mm A\"}/>\n                        </Typography>\n                        <Typography variant={\"body1\"}>\n                            Completed: <Time value={this.props.task.time_completed} format={\"DD/MM/YYYY hh:mm A\"}/>\n                        </Typography>\n                    </div>\n                );\n            }\n        }\n\n    }\n}\n\nexport default TaskDetail;","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport TaskDetail from '../components/task-detail';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\n\nclass TaskList extends Component {\n\n    renderTask() {\n        return this.props.tasks.map((task) => {\n            return (\n                <Grid item xs={12} key={task.id}>\n                    <TaskDetail task={task} />\n                    <Divider/>\n                </Grid>\n            );\n        });\n    }\n\n    render() {\n        return (\n            <Grid container>\n                {this.renderTask()}\n            </Grid>\n        )\n    }\n}\n\nfunction mapStateToProps({tasks}) {\n    return { tasks };\n}\n\nexport default connect(mapStateToProps)(TaskList);","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {fetchTasks} from '../actions/index';\nimport TaskList from './task_list';\n\nclass TaskMonitor extends Component {\n    constructor(props) {\n        super(props);\n\n        this.onClick = this.onClick.bind(this);\n    }\n\n    componentDidMount() {\n    this.onClick()\n    let timer = setInterval(this.onClick, 60000);\n    this.setState({timer});\n    }\n\n    componentWillUnmount() {\n        this.clearInterval(this.state.timer);\n      }\n\n    onClick() {\n        this.props.fetchTasks();\n    }\n\n\n    render() {\n        return (\n            <TaskList/>\n        );\n    }\n}\n\nfunction mapDispatchToProps(dispatch){\n    return bindActionCreators({fetchTasks}, dispatch);\n}\n\nexport default connect(null, mapDispatchToProps)(TaskMonitor);","import React, { Component } from 'react';\nimport logo from '../logo.svg';\nimport '../App.css';\nimport AppBar from './app-bar';\nimport Grid from '@material-ui/core/Grid';\nimport TaskMonitor from '../containers/task-monitor';\n\nexport default class App extends Component {\n  render() {\n      return (\n          <div className=\"App\">\n              <AppBar/>\n              <Grid container spacing={24}>\n                  <Grid item xs={12}>\n                     <TaskMonitor/>\n                  </Grid>\n              </Grid>\n\n          </div>\n        );\n  }\n}\n","import { combineReducers } from 'redux';\nimport TaskReducer from './reducer_task';\n\nconst rootReducer = combineReducers({\n    tasks: TaskReducer\n});\n\nexport default rootReducer;","import {FETCH_TASKS} from '../actions/index';\n\nexport default function(state = [], action) {\n    switch (action.type) {\n        case FETCH_TASKS:\n            return action.payload.data.tasks;\n        default:{}\n    }\n\n    return state;\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport ReduxPromise from 'redux-promise';\n\nimport './index.css';\nimport 'typeface-roboto';\nimport App from './components/App';\nimport reducers from './reducers';\n\nimport registerServiceWorker from './registerServiceWorker';\n\nconst createStoreWithMiddleware = applyMiddleware(ReduxPromise)(createStore);\n\nReactDOM.render(\n    <Provider store={createStoreWithMiddleware(reducers)}>\n        <App />\n    </Provider>\n    , document.querySelector('.root'));\n\nregisterServiceWorker();\n"],"sourceRoot":""}